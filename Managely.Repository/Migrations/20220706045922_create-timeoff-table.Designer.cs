// <auto-generated />
using System;
using Managely.Repository.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Managely.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220706045922_create-timeoff-table")]
    partial class createtimeofftable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Managely.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReportsToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ReportsToId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Managely.Domain.Models.EmployeeTimeOff", b =>
                {
                    b.Property<Guid>("EmployeTimeOffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TimeOffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeTimeOffId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TimeOffId");

                    b.ToTable("EmployeeTimeOffs");
                });

            modelBuilder.Entity("Managely.Domain.Models.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = new Guid("07ab6738-56df-4c71-83b5-3f48ec1b9e64"),
                            Name = "Create"
                        },
                        new
                        {
                            PermissionId = new Guid("b728b46c-914c-456a-834d-5936e722b151"),
                            Name = "Update"
                        },
                        new
                        {
                            PermissionId = new Guid("bbc97065-0fb3-491e-89f8-cbe098a0a3d1"),
                            Name = "Read"
                        },
                        new
                        {
                            PermissionId = new Guid("bd6a7c6a-a36a-4063-8c2b-9713ea14b5c4"),
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("Managely.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("isEnabled")
                        .HasColumnType("bit");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("ececa461-89bf-46e4-9864-48001ba7c694"),
                            Name = "Admin",
                            isEnabled = false
                        },
                        new
                        {
                            RoleId = new Guid("2a287f3f-7b50-4837-8b55-fbfd8e04e9fb"),
                            Name = "Manager",
                            isEnabled = false
                        },
                        new
                        {
                            RoleId = new Guid("5eb8a414-048a-4dbf-9bb0-f68cb9609ace"),
                            Name = "Staff",
                            isEnabled = false
                        });
                });

            modelBuilder.Entity("Managely.Domain.Models.RolePermission", b =>
                {
                    b.Property<Guid>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RolePermissionId = new Guid("54217dff-805f-4185-8098-30002bc72e6d"),
                            PermissionId = new Guid("07ab6738-56df-4c71-83b5-3f48ec1b9e64"),
                            RoleId = new Guid("ececa461-89bf-46e4-9864-48001ba7c694")
                        },
                        new
                        {
                            RolePermissionId = new Guid("8972d553-1edd-44f0-92b8-077605d6b03e"),
                            PermissionId = new Guid("07ab6738-56df-4c71-83b5-3f48ec1b9e64"),
                            RoleId = new Guid("2a287f3f-7b50-4837-8b55-fbfd8e04e9fb")
                        },
                        new
                        {
                            RolePermissionId = new Guid("62d6ab1c-925f-438d-bc51-354a00f14d0e"),
                            PermissionId = new Guid("b728b46c-914c-456a-834d-5936e722b151"),
                            RoleId = new Guid("ececa461-89bf-46e4-9864-48001ba7c694")
                        },
                        new
                        {
                            RolePermissionId = new Guid("f4d5cf36-7afa-40c9-b2c3-1132078ca2f1"),
                            PermissionId = new Guid("b728b46c-914c-456a-834d-5936e722b151"),
                            RoleId = new Guid("2a287f3f-7b50-4837-8b55-fbfd8e04e9fb")
                        },
                        new
                        {
                            RolePermissionId = new Guid("366bdb88-e82a-4d29-8ed3-1f31315c1259"),
                            PermissionId = new Guid("bbc97065-0fb3-491e-89f8-cbe098a0a3d1"),
                            RoleId = new Guid("ececa461-89bf-46e4-9864-48001ba7c694")
                        },
                        new
                        {
                            RolePermissionId = new Guid("f85d1311-276d-43bc-8b63-abfe2e7481db"),
                            PermissionId = new Guid("bbc97065-0fb3-491e-89f8-cbe098a0a3d1"),
                            RoleId = new Guid("2a287f3f-7b50-4837-8b55-fbfd8e04e9fb")
                        },
                        new
                        {
                            RolePermissionId = new Guid("44dbb97a-6285-4ef1-ab92-5626abbe3e40"),
                            PermissionId = new Guid("bd6a7c6a-a36a-4063-8c2b-9713ea14b5c4"),
                            RoleId = new Guid("ececa461-89bf-46e4-9864-48001ba7c694")
                        },
                        new
                        {
                            RolePermissionId = new Guid("b053af1d-5d25-44bb-a25f-65313514c909"),
                            PermissionId = new Guid("bd6a7c6a-a36a-4063-8c2b-9713ea14b5c4"),
                            RoleId = new Guid("2a287f3f-7b50-4837-8b55-fbfd8e04e9fb")
                        },
                        new
                        {
                            RolePermissionId = new Guid("d1167301-6072-4fed-9634-5d1826cc102b"),
                            PermissionId = new Guid("bbc97065-0fb3-491e-89f8-cbe098a0a3d1"),
                            RoleId = new Guid("5eb8a414-048a-4dbf-9bb0-f68cb9609ace")
                        });
                });

            modelBuilder.Entity("Managely.Domain.Models.TimeOff", b =>
                {
                    b.Property<Guid>("TimeOffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<DateTime>("ThruDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TimeOffId");

                    b.ToTable("TimeOffs");
                });

            modelBuilder.Entity("Managely.Domain.Models.Employee", b =>
                {
                    b.HasOne("Managely.Domain.Models.Employee", "ReportsTo")
                        .WithMany()
                        .HasForeignKey("ReportsToId");

                    b.HasOne("Managely.Domain.Models.Role", "Role")
                        .WithMany("Employee")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportsTo");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Managely.Domain.Models.EmployeeTimeOff", b =>
                {
                    b.HasOne("Managely.Domain.Models.Employee", "Employee")
                        .WithMany("EmployeeTimeOffs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Managely.Domain.Models.TimeOff", "TimeOff")
                        .WithMany("EmployeeTimeOffs")
                        .HasForeignKey("TimeOffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TimeOff");
                });

            modelBuilder.Entity("Managely.Domain.Models.RolePermission", b =>
                {
                    b.HasOne("Managely.Domain.Models.Permission", null)
                        .WithMany("RolePermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Managely.Domain.Models.Role", null)
                        .WithMany("RolePermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Managely.Domain.Models.Employee", b =>
                {
                    b.Navigation("EmployeeTimeOffs");
                });

            modelBuilder.Entity("Managely.Domain.Models.Permission", b =>
                {
                    b.Navigation("RolePermission");
                });

            modelBuilder.Entity("Managely.Domain.Models.Role", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("RolePermission");
                });

            modelBuilder.Entity("Managely.Domain.Models.TimeOff", b =>
                {
                    b.Navigation("EmployeeTimeOffs");
                });
#pragma warning restore 612, 618
        }
    }
}
