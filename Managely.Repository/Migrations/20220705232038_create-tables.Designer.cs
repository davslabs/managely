// <auto-generated />
using System;
using Managely.Repository.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Managely.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220705232038_create-tables")]
    partial class createtables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Managely.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReportsToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ReportsToId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Managely.Domain.Models.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = new Guid("17cb5565-4f1b-47c3-b259-5c2d58e2d9dc"),
                            Name = "Create"
                        },
                        new
                        {
                            PermissionId = new Guid("720d056c-2b0b-491c-9b42-a72deaaf5b69"),
                            Name = "Update"
                        },
                        new
                        {
                            PermissionId = new Guid("7421b89c-7f2e-4fee-b37e-d9e5dd8b71ad"),
                            Name = "Read"
                        },
                        new
                        {
                            PermissionId = new Guid("68350ed0-20a1-4dc6-bdfc-ee21d07fc6f0"),
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("Managely.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("isEnabled")
                        .HasColumnType("bit");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("5fbdce58-4c20-4c55-a73b-cedac8dcdfd6"),
                            Name = "Admin",
                            isEnabled = false
                        },
                        new
                        {
                            RoleId = new Guid("6f57fd31-e970-4cd3-aa83-466a800a017b"),
                            Name = "Manager",
                            isEnabled = false
                        },
                        new
                        {
                            RoleId = new Guid("242f13f4-8378-4f4a-a859-811db5ba2441"),
                            Name = "Staff",
                            isEnabled = false
                        });
                });

            modelBuilder.Entity("Managely.Domain.Models.RolePermission", b =>
                {
                    b.Property<Guid>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RolePermissionId = new Guid("c7610f5b-e29a-4c5b-bdb1-c82e4dc3aa25"),
                            PermissionId = new Guid("17cb5565-4f1b-47c3-b259-5c2d58e2d9dc"),
                            RoleId = new Guid("5fbdce58-4c20-4c55-a73b-cedac8dcdfd6")
                        },
                        new
                        {
                            RolePermissionId = new Guid("ae5647b9-3a91-4235-9a5e-8e8b9af9c3ac"),
                            PermissionId = new Guid("17cb5565-4f1b-47c3-b259-5c2d58e2d9dc"),
                            RoleId = new Guid("6f57fd31-e970-4cd3-aa83-466a800a017b")
                        },
                        new
                        {
                            RolePermissionId = new Guid("f09ebc3a-5fc2-4ed2-832e-02f31c9431ef"),
                            PermissionId = new Guid("720d056c-2b0b-491c-9b42-a72deaaf5b69"),
                            RoleId = new Guid("5fbdce58-4c20-4c55-a73b-cedac8dcdfd6")
                        },
                        new
                        {
                            RolePermissionId = new Guid("7a1e5d00-32d7-42f6-a5f4-9be114287f91"),
                            PermissionId = new Guid("720d056c-2b0b-491c-9b42-a72deaaf5b69"),
                            RoleId = new Guid("6f57fd31-e970-4cd3-aa83-466a800a017b")
                        },
                        new
                        {
                            RolePermissionId = new Guid("5ddabcda-ef4b-4d09-ac10-a557fa897b67"),
                            PermissionId = new Guid("7421b89c-7f2e-4fee-b37e-d9e5dd8b71ad"),
                            RoleId = new Guid("5fbdce58-4c20-4c55-a73b-cedac8dcdfd6")
                        },
                        new
                        {
                            RolePermissionId = new Guid("6c0e46e8-1f74-4067-8ae1-4c7cd0eafc45"),
                            PermissionId = new Guid("7421b89c-7f2e-4fee-b37e-d9e5dd8b71ad"),
                            RoleId = new Guid("6f57fd31-e970-4cd3-aa83-466a800a017b")
                        },
                        new
                        {
                            RolePermissionId = new Guid("bff3bec4-2093-40e0-8518-c0a15ea7c97a"),
                            PermissionId = new Guid("68350ed0-20a1-4dc6-bdfc-ee21d07fc6f0"),
                            RoleId = new Guid("5fbdce58-4c20-4c55-a73b-cedac8dcdfd6")
                        },
                        new
                        {
                            RolePermissionId = new Guid("f0f1cae7-9c5d-4257-8a17-e549764e9360"),
                            PermissionId = new Guid("68350ed0-20a1-4dc6-bdfc-ee21d07fc6f0"),
                            RoleId = new Guid("6f57fd31-e970-4cd3-aa83-466a800a017b")
                        },
                        new
                        {
                            RolePermissionId = new Guid("7a668c66-3138-4553-b9ad-562f5bd6e98a"),
                            PermissionId = new Guid("7421b89c-7f2e-4fee-b37e-d9e5dd8b71ad"),
                            RoleId = new Guid("242f13f4-8378-4f4a-a859-811db5ba2441")
                        });
                });

            modelBuilder.Entity("Managely.Domain.Models.Employee", b =>
                {
                    b.HasOne("Managely.Domain.Models.Employee", "ReportsTo")
                        .WithMany()
                        .HasForeignKey("ReportsToId");

                    b.HasOne("Managely.Domain.Models.Role", "Role")
                        .WithMany("Employee")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportsTo");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Managely.Domain.Models.RolePermission", b =>
                {
                    b.HasOne("Managely.Domain.Models.Permission", null)
                        .WithMany("RolePermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Managely.Domain.Models.Role", null)
                        .WithMany("RolePermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Managely.Domain.Models.Permission", b =>
                {
                    b.Navigation("RolePermission");
                });

            modelBuilder.Entity("Managely.Domain.Models.Role", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("RolePermission");
                });
#pragma warning restore 612, 618
        }
    }
}
